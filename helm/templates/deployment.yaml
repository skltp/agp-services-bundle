apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
  name: agp
spec:
  replicas: {{ .Values.deployment.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: agp
  template:
    metadata:
      annotations:
      labels:
        app: agp
        app.kubernetes.io/name: agp
        elasticGrokFilter: {{ .Values.deployment.elasticGrokFilter }}
    spec:
      volumes:
        - name: log4j
          configMap:
            name: agp-log4j
      imagePullSecrets:
        - name: regcred
      terminationGracePeriodSeconds: 90
      {{- with .Values.deployment.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: agp
          image: "{{ .Values.repository }}agp-services-bundle:{{ .Chart.AppVersion }}"
          volumeMounts:
            - mountPath: /etc/agp
              name: log4j
          ports:
            - containerPort: 9001
              name: aggservices
            - containerPort: 8080
              name: status
            - containerPort: 8091
              name: reset-cache
          lifecycle:
            preStop:
              exec:
                command: ["sleep", "10"]
          livenessProbe:
            failureThreshold: 15
            httpGet:
              path: actuator/health/liveness
              port: 8089
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: actuator/health/readiness
              port: 8089
              scheme: HTTP
            initialDelaySeconds: 40
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          resources: # Block-templated memory and CPU resources.
            {{- toYaml .Values.deployment.resources | nindent 12 }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          envFrom:
            {{- range $.Values.environment.variables._default_config_maps }}
            - configMapRef:
                name: {{ . }}
            {{- end }}
            {{- range $.Values.environment.variables.config_maps }}
            - configMapRef:
                name: {{ . }}
            {{- end }}
            {{- range $.Values.environment.variables.secrets }}
            - secretRef:
                name: {{ . }}
            {{- end }}
